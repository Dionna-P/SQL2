-- For this project I will be using SQL with MySQL to explore clinical data and provide insights regarding patient care and quality. 
-- This data set was provided by Mark Connolly as part of the SQL for Healthcare Udemy course. The data set contains 15 tables and spans over 100 years (1912-2020).
-- For this project I will only be focusing on data from the years 2016-2020 across several different tables.
-- I first created the schema and tables and then imported the data in MySQL.
-- I utilized several functions to analyze the data in this project including JOIN, CASE, HAVING, DISTINCT, ROUND and subqueries(including CTE).

-- Lets start by looking at the average ER visit duration in the year 2019.
-- The average time spent a patient spent in the ER in 2019 was 81.47 minutes or around 1.4 hours.
WITH throughput AS (
					SELECT *,
					TIMESTAMPDIFF(MINUTE,START,STOP) throughput_in_min
					FROM healthcare.encounters
					WHERE start>='2019-01-01'
					AND start<'2020-01-01'
					AND encounterclass='emergency'
					)  
SELECT 
Round(AVG(throughput_in_min), 2) AS thr_avg_in_min
FROM throughput;            
                      
-- Next, we'll look at whether the hospital treats patients differntly based on race, specifically in regards to the number of procedures in 2019.
-- It appears that the average number of procedures of White and Asian patients were consistent at around 1.7 but the average number of procedures for African Americans were a bit higher at 2.5. 
-- Based on this discovery furhter investigation is necessary to determine the underlying reason for this trend.          
SELECT proc_count.race, 
(proc_count.num_of_procedures/pt_count.num_of_patients) as avg_num_of_proc_by_race
FROM                 
	(SELECT pt.race, 
    	COUNT(*) as num_of_procedures         
	FROM healthcare.patients pt
	JOIN healthcare.encounters enc
	ON enc.patient = pt.id
	JOIN healthcare.procedures proc
	ON enc.id = proc.encounter
	WHERE enc.start>='2019-01-01'
	AND enc.start<'2020-01-01'
	AND enc.encounterclass='emergency' 
	GROUP BY pt.race) proc_count
	
	JOIN               
	(SELECT pt.race,
	COUNT(DISTINCT proc.patient) as num_of_patients       
	FROM healthcare.patients pt
	JOIN healthcare.encounters enc
	ON enc.patient = pt.id
	JOIN healthcare.procedures proc
	ON enc.id = proc.encounter
	WHERE enc.start>='2019-01-01'
	AND enc.start<'2020-01-01'
	AND enc.encounterclass = 'emergency' 
	GROUP BY pt.race) pt_count on proc_count.race = pt_count.race;  
                
	
-- Next we'll explore how many patients had uncontrolled htn (over 140/90) during the years prior to 2020. To do this we'll need to query the observations and patients table.
-- There were 31 patients total that had uncontrolled diabetes during the years prior to 2020. The query below breaks down by race the number of unique patients with uncontrolled HTN.
SELECT pt.race, 
COUNT(DISTINCT pt.id) AS volume_by_race
FROM healthcare.patients pt
JOIN healthcare.observations bp
ON pt.id = bp.patient
WHERE	((bp.description = 'systolic blood pressure' AND VALUE > '140')
	or
	(bp.description = 'diastolic blood pressure' AND VALUE >'90'))
AND DATE <'2020-01-01'
GROUP BY pt.race
ORDER BY volume_by_race DESC;

-- Let's now look at the number of patients with uncontrolled HTN over the last 5 years of data (2016-2020) to identify if there is a trend.
-- We'll use a CASE statement to create a new column that displays the patient volume by year.
-- It looks like the number of patients with uncontrolled HTN remained almost the same (give or take a couple of patients) from the years 2016-2019, with volumes ranging from 12-14.
-- We then see a significant drop in the number of patients going from 12 in 2019 to only 4 patients in 2020.
SELECT COUNT(DISTINCT pt.id) AS patient_volume,
	CASE
	WHEN bp.date >='2020-01-01' AND bp.date <'2021-01-01' THEN '2020'
	WHEN bp.date >='2019-01-01' AND bp.date < '2020-01-01' THEN '2019'
    	WHEN bp.date >='2018-01-01' AND bp.date < '2019-01-01' THEN '2018'
    	WHEN bp.date >='2017-01-01' AND bp.date < '2018-01-01' THEN '2017'
    	WHEN bp.date >='2016-01-01' AND bp.date < '2017-01-01' THEN '2016'
    	END AS year
FROM healthcare.patients pt
JOIN healthcare.observations bp
ON pt.id=bp.patient
WHERE	((bp.description = 'systolic blood pressure' AND VALUE > '140')
	or
	(bp.description = 'diastolic blood pressure' AND VALUE >'90'))
AND bp.date >='2016-01-01' AND bp.date <'2021-01-01'
GROUP BY year;

-- We will wrap up this analysis by exploring payer costs versus coverage for patients during 2019.
-- We'll be utilizing the payers and encounters table for this final analysis. 

-- Let's look at which encounter class had the highest claims cost in 2019.
-- The query below pulls the total claim cost for all encounter types in 2019. 
-- It also pulls the difference in total cost from total coverage and the difference in the average claim cost per encounter from the average amount covered per encounter.
-- It looks like ambulatory visits had the highest claims cost in 2019 with a total of $130,064.12, and an average of $71.09 in uncovered costs per encounter. 
-- What is interesting is that wellness visits were the second highest in claims costs at $120,506.28 but had the most coverage- with a difference in the average uncovered cost per visit at only $8.31.
SELECT 
encounterclass, 
ROUND(SUM(total_claim_cost), 2) AS total_claim_cost,
ROUND(SUM(total_claim_cost)  - SUM(payer_coverage), 2) AS claim_to_payer_cov_tot_difference,
ROUND(AVG(total_claim_cost)  - AVG(payer_coverage), 2) AS claim_to_payer_cov_avg_difference
FROM healthcare.encounters enc
WHERE start>='2019-01-01'
AND start<'2020-01-01'
GROUP BY encounterclass
ORDER BY total_claim_cost DESC;

-- We'll take it a step further by looking at the total claims cost and the difference in cost versus coverage broken down by payer and encounter class. 
SELECT 
payer,
name,
encounterclass,
SUM(total_claim_cost),
SUM(total_claim_cost)  - SUM(payer_coverage) AS  claim_to_payer_cov_tot_difference,
AVG(total_claim_cost)  - AVG(payer_coverage) AS claim_to_payer_cov_avg_difference
FROM healthcare.encounters enc
JOIN healthcare.payers pay 
ON enc.payer=pay.id
WHERE start>='2019-01-01'
AND start<'2020-01-01'
GROUP BY payer, name, encounterclass
ORDER BY encounterclass;

-- Finally, lets pull the coverage percentage of all payers for 2019 encounters.
-- The results are ranked from highest coverage percentage to least.
-- Anthem had the highest coverage percentage at 92% and Dual Eligible encounters had the lowest, with coverage percentage at 32%.
SELECT pay.name, 
ROUND(100*(SUM(enc.payer_coverage)/SUM(enc.total_claim_cost))) AS coverage_percentage
FROM healthcare.encounters enc
JOIN healthcare.payers pay
ON enc.payer=pay.id
WHERE enc.start>='2019-01-01'
AND enc.start<'2020-01-01'
GROUP BY pay.name
ORDER BY coverage_percentage DESC;
